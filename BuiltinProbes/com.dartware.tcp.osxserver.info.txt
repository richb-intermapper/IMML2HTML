<!-- 
	OS X Server (com.dartware.tcp.osxserver.info)
	Copyright © 2002 Dartware, LLC. All rights reserved.
-->

<header>
	type			= 	"tcp-script"
	package			= 	"com.dartware"
	probe_name		=	"tcp.osxserver.info"
	human_name		=	"OS X Server Info"
	version			= 	"1.6"
	address_type		= 	"IP"
	port_number		=	"311"
	display_name		=	"Servers-Proprietary/Apple/OS X Server/Info"
</header>

<description>

\GB\OS X Server Information\P\

This TCP probe queries a \U2=http://www.apple.com/server/macosx/\Mac OS X Server\P0\ installation for various details using the Server Admin port and protocol.

A request for status information is made via an HTTPS post to the Server Admin port. The server responds with XML data that is then parsed by the probe.

\i\User\p\ is the name of any user on the specified server.  An admin user is not required.

\i\Password\p\ is the password for the user specified in \i\User\p\.


\i3\Note: The implementation of this probe uses OpenSSL on MacOS X.\p0\

</description>


<parameters>


	"User"				=		""
	"Password*"			=		""


</parameters>

<script>
CONN #60 "SECURE"
FAIL @FAIL_INIT

STOR "RET" "@START"
GOTO #+2

@FAIL_INIT:
STOR "RET" "@FAILED"

GOTO @INIT_VARS

@START:

WAIT #30 @IDLE (idle timeout in secs)
DISC @DISCONNECT

#https://192.168.1.21:311/commands/servermgr_info?input=%3C%3Fxml+version%3D%221.0%22+encoding%3D%22UTF-8%22%3F%3E%0D%0A%3Cplist+version%3D%220.9%22%3E%0D%0A%3Cdict%3E%0D%0A%09%3Ckey%3Ecommand%3C%2Fkey%3E%0D%0A%09%3Cstring%3EgetHardwareInfo%3C%2Fstring%3E%0D%0A%09%3Ckey%3Evariant%3C%2Fkey%3E%0D%0A%09%3Cstring%3EwithQuotaUsage%3C%2Fstring%3E%0D%0A%3C%2Fdict%3E%0D%0A%3C%2Fplist%3E%0D%0A&send=Send+Command

STOR "URL" "/commands/servermgr_info"
STOR "FormData1" "input=%3C%3Fxml+version%3D%221.0%22+encoding%3D%22UTF-8%22%3F%3E%0D%0A%3Cplist+version%3D%220.9%22%3E%0D%0A%3Cdict%3E%0D%0A%09%3Ckey%3Ecommand"
STOR "FormData2" "%3C%2Fkey%3E%0D%0A%09%3Cstring%3EgetHardwareInfo%3C%2Fstring%3E%0D%0A%09%3Ckey%3Evariant%3C%2Fkey%3E%0D%0A%09"
STOR "FormData3" "%3Cstring%3EwithQuotaUsage%3C%2Fstring%3E%0D%0A%3C%2Fdict%3E%0D%0A%3C%2Fplist%3E%0D%0A&send=Send+Command"

SEND "POST ${URL} HTTP/1.0\r\n"
CHCK "${_REMOTEADDRESS}" else goto #+2
SEND "Host: ${_REMOTEADDRESS}\r\n"
STOR "LEN" "${_LENGTH:${FormData1}}"
NADD "LEN" #${_LENGTH:${FormData2}}
NADD "LEN" #${_LENGTH:${FormData3}}
SEND "Content-Length: ${LEN}\r\n"
CHCK "${User}${Password*}" else goto #+2
SEND "Authorization: Basic ${_BASE64:${User}:${Password*}}\r\n"
SEND "\r\n"
SEND "${FormData1}"
SEND "${FormData2}"
SEND "${FormData3}"

MTCH "HTTP/"i else goto @UNEXPECTED_GREETING
MTCH "200" else goto @UNAVAIL_GET_RESPONSE
LINE HTML
DISC @NO_MATCH
EXPT "<dict>"i else goto @NO_MATCH
EXPT "<key>"i else goto @NO_MATCH


DISC @DONE_OKAY

#a switch...case structure here should search for all known keys
#		(Email, Status)
@ROOT_SWITCH:
STOR "RET" "@ROOT_SWITCH"
#MTCH "<key>command</key>"i ELSE #+2
#GOTO @SKIP_LINE		#ignore
#MTCH "<key>networkThroughputBy1K</key>"i ELSE #+2
#GOTO @SKIP_LINE		#skip the next line and continue the loop
#MTCH "<key>quotaUsage</key>"i ELSE #+2
#GOTO @SKIP_LINE		#skip the next line and continue the loop

#MTCH "<key>cpuUsagesBy100Array</key>"i ELSE #+2
#GOTO @SKIP_ARRAY	#skip 'til </array> and then continue the loop
#MTCH "<key>networkThroughputsArray</key>"i ELSE #+2
#GOTO @SKIP_ARRAY	#skip 'til </array> and then continue the loop

MTCH "<key>cpuUsageBy100</key>"i ELSE #+2
GOTO @CPU_100
MTCH "<key>volumeInfosArray</key>"i ELSE #+2
GOTO @VOLS_INFO
MTCH "<key>networkThroughput</key>"i ELSE #+2
GOTO @NETWORK
MTCH "<key>error</key>"i ELSE #+4
NEXT
MTCH "<([a-z]+)>([^<]+)</([a-z]+)>"ir ELSE #+2
DONE WARN "Error: ${2}"

MTCH "<key>([^<]+)</key>"ir ELSE #+2
GOTO @IGNORE

MTCH "</dict>"i ELSE #+2

@DONE_OKAY:
DONE OKAY

@NO_MATCH:
DONE WARN "Improperly formed data in response."

@IDLE:
DONE DOWN "No data for ${_IDLETIMEOUT} seconds. [Line ${_IDLELINE}]"

@UNEXPECTED_GREETING:
DONE DOWN "Unexpected greeting from port ${_REMOTEPORT}. (${_LINE:50})"

@UNAVAIL_GET_RESPONSE:
MTCH m"50[0-9]" else goto @BAD_GET_RESPONSE
DONE DOWN "${_LINE:50} (${URL})"

@BAD_GET_RESPONSE:
MTCH "201" ELSE #+2
DONE WARN "201 Created (${URL})"
MTCH "202" ELSE #+2
DONE WARN "202 Accepted (${URL})"
MTCH "204" ELSE #+2
DONE WARN "204 No Content (${URL})"
MTCH "301" ELSE #+2
DONE WARN "301 Moved Permanently (${URL})"
MTCH "302" ELSE #+2
DONE WARN "302 Moved Temporarily (${URL})"
MTCH "304" ELSE #+2
DONE WARN "304 Not Modified (${URL})"
MTCH "400" ELSE #+2
DONE WARN "400 Bad Request (${URL})"
MTCH "401" ELSE #+2
DONE WARN "401 Unauthorized (${URL})"
MTCH "403" ELSE #+2
DONE WARN "403 Forbidden (${URL})"
MTCH "404" ELSE #+2
DONE WARN "404 Not Found (${URL})"
MTCH "500" ELSE #+2
DONE ALRM "500 Internal Server Error (${URL})"
MTCH "501" ELSE #+2
DONE ALRM "501 Not Implemented (${URL})"
MTCH "502" ELSE #+2
DONE ALRM "502 Bad Gateway (${URL})"
MTCH "503" ELSE #+2
DONE ALRM "503 Service Unavailable (${URL})"
DONE ALRM "Unknown Error Code ${_LINE:4} (${URL})"

@DISCONNECT:
DONE DOWN "Disconnected from port ${_REMOTEPORT} after ${_SECSCONNECTED} seconds."


@FAILED:
#use default error message in 4.2.1 and later
DONE DOWN

#subroutine to initialize the variables
@INIT_VARS:
#init variables in case there is no response
# - instead of "(NOT FOUND: VARNAME)", it will display ""
STOR "cpu" ""
STOR "network" ""

STOR "^drives0" ""
STOR "^drives0_overflow" ""
STOR "^drives1" ""
STOR "^drives1_overflow" ""
STOR "^drives2" ""
STOR "^drives2_overflow" ""
STOR "^drives3" ""
STOR "^drives3_overflow" ""


STOR "DRIVE_NAME" ""

STOR "DRIVE_TOTAL" ""

STOR "DRIVE_FREE" ""

GOTO ${RET}


#subroutine to skip a line and return
@SKIP_LINE:
NEXT
MTCH "<([a-z]+)>([^<]*)</([a-z]+)>"ir
NEXT
GOTO @ROOT_SWITCH	#If this was a REAL subroutine, it would get the RET pointer off the stack and return to that point instead of a hard-coded address of @ROOT_SWITCH

#subroutine to skip an array and return
@SKIP_ARRAY:
NEXT
#find the matching </array> tag
EXPT "</array>"i else goto @NO_MATCH
NEXT
GOTO @ROOT_SWITCH	#If this was a REAL subroutine, it would get the RET pointer off the stack and return to that point instead of a hard-coded address of @ROOT_SWITCH



#subroutine to skip an array or dict or line and return
@IGNORE:
NEXT
#check for an empty tag
MTCH "^[ \t]*<[^<]+/>[ \t]*$"ir else GOTO #+3
NEXT
GOTO ${RET}

#figure out what kind of tag it is
MTCH "<([a-z]+)>"ir else GOTO ${RET}
STOR "TAG" "${1}"
STOR "XML_STACK" "0"

@IGNORE_LOOP:
EXPT "${TAG}>"i else goto ${RET}
MTCH "</${TAG}>"i ELSE #+2
#We add -2, then fall through to the ELSE and add 1, to have a net effect of adding -1
#	(It was easier than a bunch of GOTO statements and an extra label or two...)
NADD "XML_STACK" #-2

# else assume it's a <${TAG}> tag
NADD "XML_STACK" #1

NEXT
NBGT #${XML_STACK} #0 @IGNORE_LOOP
GOTO ${RET}



@CPU_100:
NEXT
MTCH "<([a-z]+)>([^<]+)</([a-z]+)>"ir else goto ${RET}
NEXT
#This number should be divided by 100 and shown as a percent
EVAL $cpu:=${2}/100

GOTO ${RET}


@NETWORK:
NEXT
MTCH "<([a-z]+)>([^<]+)</([a-z]+)>"ir else goto ${RET}
NEXT
STOR "network" "${2}"
GOTO ${RET}



@VOLS_INFO:
NEXT
STOR "DRIVES_SEEN" "-1"

@DRIV_DETAIL_1:
EXPT "<dict>"i else goto @ROOT_SWITCH
EXPT "<key>([^<]+)</key>"ir else goto @ROOT_SWITCH

NADD "DRIVES_SEEN" #1

#loop on every <key> in the <dict>
@DRIV_DETAIL_DICT:
MTCH "</dict>"i ELSE @GET_DRIVE_VARS

CHCK "${DRIVE_NAME ${DRIVES_SEEN}}" else goto @NEXT_DRIVE_DICT
SCAT "^drives${DRIVES_SEEN}_overflow" "\r  ²5³${DRIVE_NAME ${DRIVES_SEEN}}²0P³"
CHCK "${DRIVE_FREE ${DRIVES_SEEN}}" else goto @STORE_DRIVE_TOTAL
STOR "drive" "${DRIVE_FREE ${DRIVES_SEEN}}"
EVAL $drive:=sprintf( "%.2f", ${drive}/(1024*1024) )
STOR "DRIVE_FREE ${DRIVES_SEEN}" "$drive"
@RET_1:
STOR "RET" "@RET_1"
SCAT "^drives${DRIVES_SEEN}_overflow" "\r    ²4³Free MBytes:²0³  " @DRIV_DETAIL_OVERFLOW
@RET_2:
STOR "RET" "@RET_2"
SCAT "^drives${DRIVES_SEEN}_overflow" "$${DRIVE_FREE ${DRIVES_SEEN}}" @DRIV_DETAIL_OVERFLOW
@STORE_DRIVE_TOTAL:
CHCK "${DRIVE_TOTAL ${DRIVES_SEEN}}" else goto @NEXT_DRIVE_DICT
STOR "drive" "${DRIVE_TOTAL ${DRIVES_SEEN}}"
EVAL $drive:=sprintf( "%.2f", ${drive}/(1024*1024) )
STOR "DRIVE_TOTAL ${DRIVES_SEEN}" "$drive"
@RET_3:
STOR "RET" "@RET_3"
SCAT "^drives${DRIVES_SEEN}_overflow" "\r    ²4³Total MBytes:²0³ " @DRIV_DETAIL_OVERFLOW
@RET_4:
STOR "RET" "@RET_4"
SCAT "^drives${DRIVES_SEEN}_overflow" "$${DRIVE_TOTAL ${DRIVES_SEEN}}" @DRIV_DETAIL_OVERFLOW

@NEXT_DRIVE_DICT:

NEXT

MTCH "</array>"i ELSE @DRIV_DETAIL_1
GOTO @VOLS_INFO


@GET_DRIVE_VARS:
MTCH "<key>([^<]+)</key>"ir else goto @DRIVES
SBNE "${1}" "freeBytes"i #+3
STOR "DRIVE_VAR_NAME" "DRIVE_FREE"
GOTO @GET_DRIVE_VAR_VALUE
SBNE "${1}" "totalBytes"i #+3
STOR "DRIVE_VAR_NAME" "DRIVE_TOTAL"
GOTO @GET_DRIVE_VAR_VALUE
SBNE "${1}" "name"i #+2
STOR "DRIVE_VAR_NAME" "DRIVE_NAME"

@GET_DRIVE_VAR_VALUE:
NEXT
MTCH "<([a-z]+)>([^<]+)</([a-z]+)>"ir else goto @DRIVES_1
STOR "${DRIVE_VAR_NAME} ${DRIVES_SEEN}" "${2}"
NEXT
GOTO @DRIV_DETAIL_DICT

#Deal with strings > 255 characters...
@DRIV_DETAIL_OVERFLOW:
STOR "^drives${DRIVES_SEEN}" "${^drives${DRIVES_SEEN}_overflow}"
STOR "^drives${DRIVES_SEEN}_overflow" ""
GOTO ${RET}
</script>

<script-output>

\B5\OS X Server Information\0P\
  \4\CPU Usage:\0P\         ${cpu} %
  \4\Network Traffic:\0P\   ${network} Bps${^drives0}${^drives0_overflow}${^drives1}${^drives1_overflow}${^drives2}${^drives2_overflow}${^drives3}${^drives3_overflow}

</script-output>


<!--
Sample plist:
<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE plist PUBLIC "-//Apple Computer//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
<plist version="1.0">
<dict>
	<key>command</key>
	<string>getHardwareInfo</string>
	<key>cpuUsageBy100</key>
	<integer>1792</integer>
	<key>cpuUsagesBy100Array</key>
	<array>
		<dict>
			<key>cpuUsage-0</key>
			<integer>1792</integer>
		</dict>
	</array>
	<key>networkThroughput</key>
	<integer>2914</integer>
	<key>networkThroughputBy1K</key>
	<integer>2</integer>
	<key>networkThroughputsArray</key>
	<array>
		<dict>
			<key>networkThroughput-in-en1/4</key>
			<integer>0</integer>
		</dict>
		<dict>
			<key>networkThroughput-out-en1/4</key>
			<integer>0</integer>
		</dict>
		<dict>
			<key>networkThroughput-in-en0/5</key>
			<integer>1517</integer>
		</dict>
		<dict>
			<key>networkThroughput-out-en0/5</key>
			<integer>1397</integer>
		</dict>
	</array>
	<key>quotaUsage</key>
	<string></string>
	<key>volumeInfosArray</key>
	<array>
		<dict>
			<key>freeBytes</key>
			<integer>17366536192</integer>
			<key>name</key>
			<string>Macintosh HD</string>
			<key>totalBytes</key>
			<integer>20559773696</integer>
		</dict>
		<dict>
			<key>freeBytes</key>
			<integer>5545467904</integer>
			<key>name</key>
			<string>SHARE1 on SNAP111642</string>
			<key>totalBytes</key>
			<integer>14669611008</integer>
		</dict>
	</array>
</dict>
</plist>
-->

<datasets>
	$cpu,	'cpupercent',	"percent",	"true",	"CPU Usage"
</datasets>
