<!-- 
Command Line WMI Probe to check available disk space (com.dartware.wmi.disk_available) 
Copyright (c) 2010 Dartware, LLC. All rights reserved. 
--> 

<header> 
	type			=	"cmd-line" 
	package			=	"com.dartware" 
	probe_name		=	"wmi.disk_available" 
	human_name		=	"WMI Disk Available" 
	version			=	"1.9" 
	address_type	=	"IP"
	display_name	=	"WMI/WMI Disk Available"
	visible_in 		=	"Windows"
	flags			=	"NTCREDENTIALS"	
</header> 

<description> 
\GB\WMI Disk Available\p\ 

This probe uses WMI to retrieve the disk space available on a drive on the target host.  Specifically, it queries the Size and FreeSpace properties of the Win32_LogicalDisk class, computes percentage free space, and compares it against the Warning and Critical parameters you set.  The target host must be running Windows 2000 or later.

The Drive parameter may be set to "All" to enumerate all Local hard drives on the host.  It may also be set to a list of comma-separated drive names (including the colon), which will be listed whether or not they are local hard drives.  Zero-sized drives (i.e. an empty cd-rom) will not be listed.  The first drive failing the warning or critical criteria will be the one cited in the reason.

The User parameter may be a local user on the target host, or may take the form of "domain\\user" for a domain login.  Leave it blank if authentication is not required, such as when the target is the localhost.

InterMapper invokes the disk_avail.vbs companion script which was placed in the Tools folder of the InterMapper Settings folder when this probe was loaded.  It uses the exit value to set the condition of the device and the performance data returned by the script to create a nice display of chartable data.

</description> 

<parameters>
	Drive="C:"
	"Warning (%)"="20"
	"Critical (%)"="10"
	User=""
	"Password*" = ""
	"Timeout (sec)"=""
</parameters> 


<command-line> 
	-- Empty path forces the InterMapper Settings:Tools directory
	path="" 
	cmd="${CSCRIPT} disk_avail.vbs"
	arg="-h ${address} -i ${Drive} -w ${Warning (%)} -c ${Critical (%)}"
	input = "${User} ${Password*}"
	timeout = ${Timeout (sec)}
</command-line> 

<command-exit>
	down:${EXIT_CODE}=3 
	critical:${EXIT_CODE}=2 
	alarm:${EXIT_CODE}=1 
	okay:${EXIT_CODE}=0 
</command-exit> 

<command-display>
${^stdout}
</command-display> 

<tool:disk_avail.vbs>
'Command Line WMI Probe to check available disk space (to be used with com.dartware.wmi.disk_available) 
'Copyright (c) 2009 Dartware, LLC. All rights reserved. 

' get args up to next switch in case there are spaces in list
FUNCTION GetNextArg(j, nargs)
	arg = ""
	do until (j = nargs-1)
		if (instr(wscript.arguments(j+1), "-") = 1) then
			exit do
		else
			arg = arg & wscript.arguments(j+1)
			j = j + 1
		end if
	loop
	GetNextArg = arg
END FUNCTION

FUNCTION CheckError(reasonStr)
	if (err.number <> 0) then
		reasonStr = vbNewLine & reasonStr & "Error #" & CStr(Err.Number) & " " & Err.Description
		wscript.echo "\{reason:=""" & reasonStr & """}"
		wscript.quit(3)
	end if
END FUNCTION

On Error Resume Next

' Collect our arguments
host = ""
user = ""
pass = ""
inst = ""
warn = ""
crit = ""
verbose = False

numargs = wscript.arguments.count
for i=0 to numargs-1
	test = wscript.arguments(i)
	if (test = "-v") then verbose = True
	if (test = "-host") OR (test = "-h") then
		host = GetNextArg(i, numargs)
	end if
	if (test = "-user") OR (test = "-u") then
		user = GetNextArg(i, numargs)
	end if
	if (test = "-pass") OR (test = "-p") then
		pass = GetNextArg(i, numargs)
	end if
	if (test = "-inst") OR (test = "-i") then
		inst = GetNextArg(i, numargs)
	end if
	if (test = "-warn") OR (test = "-w") then
		warn = GetNextArg(i, numargs)
		if (warn <> "") then warn = ccur(warn)
	end if
	if (test = "-crit") OR (test = "-c") then
		crit = GetNextArg(i, numargs)
		if (crit <> "") then crit = ccur(crit)
	end if
next

' Read username and password from stdin
if  not WScript.StdIn.AtEndOfStream then
	inpStr = WScript.StdIn.ReadLine
end if
if verbose then wscript.echo "stdin: " & inpStr

dim cred
cred = split(inpStr, " ")
user = cred(0)
pass = cred(1) 

if (host = "" or inst = "" or warn = "" or crit = "") then
	Err.Raise vbObjectError + 1, "", "Error processing arguments"
	CheckError("")
end if

' Build query
dim drives
query = "Select * from Win32_LogicalDisk"

if (lcase(inst) = "all") then		' list all local hard drives
	query = query & " Where DriveType = 3"
else						' drives were specified
	drives = split(inst,",")
	for i = 0 to UBound(drives)
		if (i = 0) then
			query = query & " Where Name = '" & drives(i) & "'"
		else
			query = query & " or Name = '" & drives(i) & "'"
		end if
	next
end if

' Connect with target via WMI
strComputer = host
Set objSWbemLocator = CreateObject("WbemScripting.SWbemLocator")
CheckError("")

if (user = "") or (lcase(user) = "none") then		' no authentication needed
	Set objWMIService = GetObject("winmgmts:" & "{impersonationLevel=impersonate}!\\" & strComputer & "\root\cimv2") 
	CheckError("")
else						' authenticate with user/pass
	user = Replace(user,"\\","\")
	Set objWMIService = objSWbemLocator.ConnectServer (strComputer, "\root\cimv2", user, pass)
	CheckError("")
	objWMIService.Security_.ImpersonationLevel = 3
end if

' Execute query
Set colItems = objWMIService.ExecQuery(query,,48)

' Massage data
dim FreeHDSpace()	' colItems.Count won't work because WMI needs to enumerate the entire collection, to slow for VBscript
dim TotalHDSpace()	' the redim in a loop below looks ugly, but is the more effecient choice
dim PercentFree()
dim DriveName()

nP = 0
For Each objItem in colItems
	if (objItem.Size <> "") then
		nP = nP + 1
		redim preserve FreeHDSpace(nP)
		redim preserve TotalHDSpace(nP)
		redim preserve PercentFree(nP)
		redim preserve DriveName(nP)
	
		FreeHDSpace(nP) = ((cdbl(objItem.FreeSpace)/1024)/1024)/1024
		TotalHDSpace(nP) = ((cdbl(objItem.Size)/1024)/1024)/1024
		if (FreeHDSpace(nP) = 0) then
			PercentFree(nP) = 0
		else
			PercentFree(nP) = (FreeHDSpace(nP)/TotalHDSpace(nP))*100
		end if
		DriveName(nP) = objItem.Name
	end if
Next
CheckError("")

' Evaluate criteria to set returncode
criticalreason = ""
warningreason = ""
returncode = 0

for n=1 to nP
	if (PercentFree(n) < crit) then 
		returncode = 2
		criticalreason = criticalreason & vbNewLine & "Free space is below " & crit & "% on " & DriveName(n)
	elseif (PercentFree(n) < warn) then 
		if (returncode < 2) then 
			returncode = 1
			warningreason = warningreason & vbNewLine & "Free space is below " & warn & "% on " & DriveName(n)
		end if
	end if
next

' Build data output
output= "\{"
for n=1 to nP
	output = output & "FreeHDSpace" & n & ":=" & formatnumber(FreeHDSpace(n),1,vbTrue,vbFalse,vbFalse) & ","
	output = output & "TotalHDSpace" & n & ":=" & formatnumber(TotalHDSpace(n),1,vbTrue,vbFalse,vbFalse) & ","
	output = output & "PercentFree" & n & ":=" & formatnumber(PercentFree(n),1,vbTrue,vbFalse,vbFalse) & ","
next

' Set reason based on returncode
output = output & "reason:="""

select case returncode
	case 0:
		if (nP = 0) then
			output = output & "No drive was selected."
		else
			output = output & "Free space is above " & warn & "%"
		end if
	case 1:
		output = output & warningreason
	case 2:
		output = output & criticalreason
end select
output = output & """}"

wscript.echo output & "\B5\WMI Disk Space Available\P0\"

for n=1 to nP
	wscript.echo "  \B4\Drive: " & DriveName(n) & "\P0\"
	wscript.echo "      \4\Free HD Space:\0\   $FreeHDSpace" & n & " GB"
	wscript.echo "      \4\Total HD Space:\0\  $TotalHDSpace" & n & " GB"
	wscript.echo "      \4\Percent Free:\0\    $PercentFree" & n & " %"
next

' Done
wscript.quit(returncode)
</tool:disk_avail.vbs>