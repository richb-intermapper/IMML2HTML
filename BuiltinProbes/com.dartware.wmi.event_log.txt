<!-- 
Command Line WMI Probe to check event log entries (com.dartware.wmi.event_log) 
Copyright (c) 2010 Dartware, LLC. All rights reserved. 
--> 

<header> 
	type			=	"cmd-line" 
	package			=	"com.dartware" 
	probe_name		=	"wmi.event_log" 
	human_name		=	"WMI Event Log" 
	version			=	"1.10" 
	address_type	=	"IP"
	display_name	=	"WMI/WMI Event Log"
	visible_in 		=	"Windows"
	flags			=	"NTCREDENTIALS"	
</header> 

<description> 
\GB\WMI Event Log\p\ 

This probe uses WMI to retrieve entries from the Event Logs on the target host.  Specifically, it queries the Win32_NTLogEvent class, limiting the search with the parameters you set.  If matching events are found, a critical status is returned.  The target host must be running Windows 2000 or later.

The Log File parameter contains a comma-separated list of the logs which are to be searched.  At least one Log File is required.

The Event Codes parameter is a comma-separated list of event codes for which to search.  Leave it blank to select all codes.

The Event Types paramaeter is a comma-seaprated list of either event type names or the corresponding numerical values.  Names and values can be intermixed.  This limits the selection to events of these types.

The Hours, Minutes and Seconds parameters combine to define how far back in the event log to search.  These parameters are subtracted from the current time and used to select events based on when they were written to the log.

The User parameter may be a local user on the target host, or may take the form of "domain\\user" for a domain login.  Leave it blank if authentication is not required, such as when the target is the localhost.

InterMapper invokes the event_log.vbs companion script which was placed in the Tools folder of the InterMapper Settings folder when this probe was loaded.

</description> 

<parameters>
	"Log File"="System"
	"Event Codes"=""
	"Event Types"=""
	"Event Source"=""
	Hours="1"
	Minutes=""
	Seconds=""
	User=""
	"Password*"=""
	"Timeout (sec)"=""
</parameters> 


<command-line> 
	-- Empty path forces the InterMapper Settings:Tools directory
	path="" 
	cmd="${CSCRIPT} event_log.vbs"
	arg="-h ${address} -l ${Log File} -c ${Event Codes} -e ${Event Types} -s ${Event Source} -t ${Hours}:${Minutes}:${Seconds}"
	input = "${User} ${Password*}"
	timeout = ${Timeout (sec)}
</command-line> 

<command-exit>
	down:${EXIT_CODE}=3 
	critical:${EXIT_CODE}=2 
	alarm:${EXIT_CODE}=1 
	okay:${EXIT_CODE}=0 
</command-exit> 

<command-display>
${^stdout}
</command-display> 

<tool:event_log.vbs>
'Command Line WMI Probe to check for recent event log entries (to be used with com.dartware.wmi.event_log)
'Copyright (c) 2009 Dartware, LLC. All rights reserved. 

On Error Resume Next

' get args up to next switch in case there are spaces in list
FUNCTION GetNextArg(j, nargs)
	arg = ""
	do until (j = nargs-1)
		if (instr(wscript.arguments(j+1), "-") = 1) then
			exit do
		else
			arg = arg & wscript.arguments(j+1)
			j = j + 1
		end if
	loop
	GetNextArg = arg
END FUNCTION

FUNCTION CheckError(reasonStr)
	if (err.number <> 0) then
		reasonStr = vbNewLine & reasonStr & "Error #" & CStr(Err.Number) & " " & Err.Description
		wscript.echo "\{reason:=""" & reasonStr & """}"
		wscript.quit(3)
	end if
END FUNCTION

FUNCTION SpaceOut(item, width)
	SpaceOut = item & space(width-len(item))
END FUNCTION

' Collect our arguments
host = ""
user = ""
pass = ""
code = ""
logf = ""
timw = ""
warn = ""
etyp = ""
src = ""
verbose = False

numargs = wscript.arguments.count
for i=0 to numargs-1
	test = wscript.arguments(i)
	if (test = "-v") then verbose = True
	if (test = "-host") OR (test = "-h") then
		host = GetNextArg(i, numargs)
	end if
	if (test = "-user") OR (test = "-u") then
		user = GetNextArg(i, numargs)
	end if
	if (test = "-pass") OR (test = "-p") then
		pass = GetNextArg(i, numargs)
	end if
	if (test = "-code") OR (test = "-c") then
		code = GetNextArg(i, numargs)
	end if
	if (test = "-time") OR (test = "-t") then
		timw = GetNextArg(i, numargs)
	end if
	if (test = "-logf") OR (test = "-l") then
		logf = GetNextArg(i, numargs)
	end if
	if (test = "-src") OR (test = "-s") then
		src = GetNextArg(i, numargs)
	end if
	if (test = "-type") OR (test = "-e") then
		etyp = GetNextArg(i, numargs)
	end if
next

' Read username and password from stdin
if  not WScript.StdIn.AtEndOfStream then
	inpStr = WScript.StdIn.ReadLine
end if
if verbose then wscript.echo "stdin: " & inpStr

dim cred
cred = split(inpStr, " ")
user = cred(0)
pass = cred(1) 

if (host = "" or logf = "") then
	Err.Raise vbObjectError + 1, "", "Error processing arguments"
	CheckError("")
end if

' Build query
query = "Select * from Win32_NTLogEvent"

' add event log clause
if (logf <> "") then
	dim logs
	logs = split(logf,",")
	for i = 0 to UBound(logs)
		if (i = 0) then
			query = query & " Where ("
		else
			query = query & " or "
		end if
		query = query & "Logfile = '" & logs(i) & "'"
	next
	query = query & ")"
end if

' add event code clause
if (code <> "") then
	dim codes
	codes = split(code,",")
	for i = 0 to UBound(codes)
		if (i = 0) then
			query = query & " and ("
		else
			query = query & " or "
		end if
		query = query & "EventCode = " & codes(i)
	next
	query = query & ")"
end if

' add event type clause
if (etyp <> "") then
	dim types
	types = split(etyp,",")
	for i = 0 to UBound(types)
		if (i = 0) then
			query = query & " and ("
		else
			query = query & " or "
		end if
		if (isnumeric(types(i))) then
			query = query & "EventType = " & types(i)
		else
			query = query & "Type = '" & types(i) & "'"
		end if
	next
	query = query & ")"
end if

' add event source clause
if (src <> "") then
	dim sources
	sources = split(src,",")
	for i = 0 to UBound(sources)
		if (i = 0) then
			query = query & " and ("
		else
			query = query & " or "
		end if
		query = query & "SourceName = '" & sources(i) & "'"
	next
	query = query & ")"
end if

' pick apart time
Set objSWbemDateTime = CreateObject("WbemScripting.SWbemDateTime")
CheckError("")

if (timw <> "::") then
	dim tp
	tp = split(timw, ":")
	tl = ubound(tp)
	
	objSWbemDateTime.SetVarDate Now, True
	dtm = objSWbemDateTime.GetVarDate(True)
	if (tp(0) <> "") then dtm = DateAdd("h", -1*tp(0), dtm)
	if (tl >= 1 and tp(1) <> "") then dtm = DateAdd("n", -1*tp(1), dtm)
	if (tl >= 2 and tp(2) <> "") then dtm = DateAdd("s", -1*tp(2), dtm)
	objSWbemDateTime.SetVarDate dtm, True
	query = query & " and TimeWritten >= '" & objSWbemDateTime.Value & "'"
end if
CheckError("")

if (verbose) then wscript.echo "query = " & query

' Connect with target via WMI
strComputer = host
Set objSWbemLocator = CreateObject("WbemScripting.SWbemLocator")
CheckError("")

if (user = "") or (lcase(user) = "none") then		' no authentication needed
	Set objWMIService = GetObject("winmgmts:" & "{impersonationLevel=impersonate}!\\" & strComputer & "\root\cimv2") 
	CheckError("")
else						' authenticate with user/pass
	user = Replace(user,"\\","\")
	Set objWMIService = objSWbemLocator.ConnectServer (strComputer, "\root\cimv2", user, pass)
	CheckError("")
	objWMIService.Security_.ImpersonationLevel = 3
end if

' Execute query
Set colItems = objWMIService.ExecQuery(query,,48)
CheckError("")

' Loop through files to set body, reason and returncode
body = ""
returncode = 0
num = 0

For Each objItem in colItems
	body = body & vbNewLine & SpaceOut(objItem.Logfile, 16)
	body = body & SpaceOut(objItem.Type, 16)
	objSWbemDateTime.Value =  objItem.TimeGenerated
	body = body & SpaceOut(objSWbemDateTime.GetVarDate(True), 22)
	body = body & SpaceOut(objItem.SourceName, 18)
	body = body & SpaceOut(objItem.EventCode, 12)
	tmp = objItem.User
	if (objItem.User <> Empty) then
		body = body & SpaceOut(objItem.User, 16)
	else
		body = body & "N/A             "
	end if
	body = body & objItem.ComputerName
	num = num + 1
	returncode = 2
Next
CheckError("")

if (returncode = 2) then 
	if (num = 1) then
		reason = "1 event was selected."
	else
		reason = num & " events were selected."
	end if
else
	reason = "No events were selected."
end if

' Build data output
output= "\{reason:=""" & reason & """}"

wscript.echo output & "\B5\WMI Event Log\P0\" & replace(body, "\", "\\")

' Done
wscript.quit(returncode)
</tool:event_log.vbs>