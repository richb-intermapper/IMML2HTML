<!-- 
Command Line WMI Probe to check available memory (com.dartware.wmi.free_memory) 
Copyright (c) 2010 Dartware, LLC. All rights reserved. 
--> 

<header> 
	type			=	"cmd-line" 
	package			=	"com.dartware" 
	probe_name		=	"wmi.free_memory" 
	human_name		=	"WMI Free Memory" 
	version			=	"1.8" 
	address_type	=	"IP"
	display_name	=	"WMI/WMI Free Memory"
	visible_in 		=	"Windows"
	flags			=	"NTCREDENTIALS"	
</header> 

<description> 
\GB\WMI Free Memory\p\ 

This probe uses WMI to retrieve the amount of physical memory available to processes running on the target host, in megabytes.  Specifically, it queries the TotalPhysicalMemory property of the Win32_ComputerSystem class.  It also queries the FreePhysicalMemory property of the Win32_OperatingSystem class and compares it against the Warning and Critical parameters you set.  The target host must be running Windows 2000 or later.

The User parameter be a local user on the target host, or may take the form of "domain\\user" for a domain login.  Leave it blank if authentication is not required, such as when the target is the localhost.

InterMapper invokes the free_mem.vbs companion script which was placed in the Tools folder of the InterMapper Settings folder when this probe was loaded.  It uses the exit value to set the condition of the device and the performance data returned by the script to create a nice display of chartable data.

</description> 

<parameters>
	"Warning (MB)"="10"
	"Critical (MB)"="5"
	User=""
	"Password*" = ""
	"Timeout (sec)"=""
</parameters> 


<command-line> 
	-- Empty path forces the InterMapper Settings:Tools directory
	path="" 
	cmd="${CSCRIPT} free_mem.vbs"
	arg="-h ${address} -w ${Warning (MB)} -c ${Critical (MB)}"
	input = "${User} ${Password*}"
	timeout = ${Timeout (sec)}
</command-line> 

<command-exit>
	down:${EXIT_CODE}=3 
	critical:${EXIT_CODE}=2 
	alarm:${EXIT_CODE}=1 
	okay:${EXIT_CODE}=0 
</command-exit> 

<command-display>
${^stdout}
</command-display> 

<tool:free_mem.vbs>
'Command Line WMI Probe to check available memory (to be used with com.dartware.wmi.free_memory) 
'Copyright (c) 2009 Dartware, LLC. All rights reserved. 

'On Error Resume Next

' get args up to next switch in case there are spaces in list
FUNCTION GetNextArg(j, nargs)
	arg = ""
	do until (j = nargs-1)
		if (instr(wscript.arguments(j+1), "-") = 1) then
			exit do
		else
			arg = arg & wscript.arguments(j+1)
			j = j + 1
		end if
	loop
	GetNextArg = arg
END FUNCTION

FUNCTION CheckError(reasonStr)
	if (err.number <> 0) then
		reasonStr = vbNewLine & reasonStr & "Error #" & CStr(Err.Number) & " " & Err.Description
		wscript.echo "\{reason:=""" & reasonStr & """}"
		wscript.quit(3)
	end if
END FUNCTION

' Collect our arguments
host = ""
user = ""
pass = ""
warn = ""
crit = ""
verbose = False

numargs = wscript.arguments.count
for i=0 to numargs-1
	test = wscript.arguments(i)
	if (test = "-v") then verbose = True
	if (test = "-host") OR (test = "-h") then
		host = GetNextArg(i, numargs)
	end if
	if (test = "-user") OR (test = "-u") then
		user = GetNextArg(i, numargs)
	end if
	if (test = "-pass") OR (test = "-p") then
		pass = GetNextArg(i, numargs)
	end if
	if (test = "-warn") OR (test = "-w") then
		warn = GetNextArg(i, numargs)
		if (warn <> "") then warn = ccur(warn)
	end if
	if (test = "-crit") OR (test = "-c") then
		crit = GetNextArg(i, numargs)
		if (crit <> "") then crit = ccur(crit)
	end if
next

' Read username and password from stdin
if  not WScript.StdIn.AtEndOfStream then
	inpStr = WScript.StdIn.ReadLine
end if
if verbose then wscript.echo "stdin: " & inpStr

dim cred
cred = split(inpStr, " ")
user = cred(0)
pass = cred(1) 

if (host = "" or warn = "" or crit = "") then
	Err.Raise vbObjectError + 1, "", "Error processing arguments"
	CheckError("")
end if

' Connect with target via WMI
strComputer = host
Set objSWbemLocator = CreateObject("WbemScripting.SWbemLocator")
CheckError("")

if (user = "") or (lcase(user) = "none") then		' no authentication needed
	Set objWMIService = GetObject("winmgmts:" & "{impersonationLevel=impersonate}!\\" & strComputer & "\root\cimv2") 
	CheckError("")
else						' authenticate with user/pass
	user = Replace(user,"\\","\")
	Set objWMIService = objSWbemLocator.ConnectServer (strComputer, "\root\cimv2", user, pass)
	CheckError("")
	objWMIService.Security_.ImpersonationLevel = 3
end if

' Execute query for total memory
Set colItems = objWMIService.ExecQuery("Select * from Win32_ComputerSystem",,48)
CheckError("")

' Massage data
For Each objItem in colItems
    TotalMBytes = cdbl(objItem.TotalPhysicalMemory)/1024/1024
Next
CheckError("")

' Execute query for free memory
Set colItems = objWMIService.ExecQuery("Select * from Win32_OperatingSystem",,48)
CheckError("")

' Massage data
For Each objItem in colItems
    FreeMBytes = cdbl(objItem.FreePhysicalMemory)/1024
Next
CheckError("")

if (FreeMBytes < crit) then 
	returncode = 2
	reason = "Free memory is below " & crit & " MB"
elseif (FreeMBytes < warn) then 
	returncode = 1
	reason = "Free memory is below " & warn & " MB"
else
	returncode = 0
	reason = "Free memory is above " & warn & " MB"
end if

output= "\{"

strFreeMBytes = formatnumber(FreeMBytes,1,vbTrue,vbFalse,vbFalse)
pad1 = 11 - len(strFreeMBytes)
strTotalMBytes = formatnumber(TotalMBytes,1,vbTrue,vbFalse,vbFalse)
pad2 = 10 - len(strTotalMBytes)

output = output & "FreeMBytes" & n & ":=" & strFreeMBytes & ","
output = output & "TotalMBytes" & n & ":=" & strTotalMBytes & ","
output = output & "reason:=""" & reason & """}"

wscript.echo output & "\B5\WMI Free Memory\0P\"
wscript.echo "    \4\Free Memory:" & space(pad1) & "\0\ $FreeMBytes" & n & " MB"
wscript.echo "    \4\Total Memory:" & space(pad2) & "\0\ $TotalMBytes" & n & " MB"

' Done
wscript.quit(returncode)
</tool:free_mem.vbs>