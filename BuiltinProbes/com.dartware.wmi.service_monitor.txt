<!-- 
Command Line WMI Probe to monitor services (com.dartware.wmi.service_monitor) 
Copyright (c) 2010 Dartware, LLC. All rights reserved. 
--> 

<header> 
	type			=	"cmd-line" 
	package			=	"com.dartware" 
	probe_name		=	"wmi.service_monitor" 
	human_name		=	"WMI Service Monitor" 
	version			=	"1.12" 
	address_type	=	"IP"
	display_name	=	"WMI/WMI Service Monitor"
	visible_in 		=	"Windows"
	flags			=	"NTCREDENTIALS"	
</header> 

<description> 
\GB\WMI Service Monitor\p\ 

This probe uses WMI to retrieve the state of services running on the target hostby querying the Win32_Service class.  Any of the specified services that are not found are listed and the status is set to Critical.  The target host must be running Windows 2000 or later.

The Service parameter is set to a comma-separated list of service names you wish to check.  Service names should not be confused with the service's Display Name, which is what is shown in the Services tool.  Check the Properties for the service to see the actual service name.  Names containing spaces or other special characters should be enclosed in quotes.

The User parameter may be a local user on the target host, or may take the form of "domain\\user" for a domain login.  Leave it blank if authentication is not required, such as when the target is the localhost.

InterMapper invokes the serv_mon.vbs companion script which was placed in the Tools folder of the InterMapper Settings folder when this probe was loaded.  It uses the exit value to set the condition of the device.

</description> 

<parameters>
	Service=""
	User=""
	"Password*" = ""
	"Timeout (sec)"=""
</parameters> 


<command-line> 
	-- Empty path forces the InterMapper Settings:Tools directory
	path="" 
	cmd="${CSCRIPT} serv_mon.vbs"
	arg="-h ${address} -i ${Service}"
	input = "${User} ${Password*}"
	timeout = ${Timeout (sec)}
</command-line> 

<command-exit>
	down:${EXIT_CODE}=3 
	critical:${EXIT_CODE}=2 
	alarm:${EXIT_CODE}=1 
	okay:${EXIT_CODE}=0 
</command-exit> 

<command-display>
${^stdout}
</command-display> 

<tool:serv_mon.vbs>
'Command Line WMI Probe to monitor processes (to be used with com.dartware.wmi.service_monitor) 
'Copyright (c) 2009 Dartware, LLC. All rights reserved. 


' get args up to next switch in case there are spaces in list
FUNCTION GetNextArg(j, nargs)
	arg = ""
	do until (j = nargs-1)
		if (instr(wscript.arguments(j+1), "-") = 1) then
			exit do
		else
			arg = arg & wscript.arguments(j+1)
			j = j + 1
		end if
	loop
	GetNextArg = arg
END FUNCTION

FUNCTION CheckError(reasonStr)
	if (err.number <> 0) then
		reasonStr = vbNewLine & reasonStr & "Error #" & CStr(Err.Number) & " " & Err.Description
		wscript.echo "\{reason:=""" & reasonStr & """}"
		wscript.quit(3)
	end if
END FUNCTION

On Error Resume Next

' Collect our arguments
host = ""
user = ""
pass = ""
inst = ""
verbose = False

numargs = wscript.arguments.count
for i=0 to numargs-1
	test = wscript.arguments(i)
	if (test = "-v") then verbose = True
	if (test = "-host") OR (test = "-h") then
		host = GetNextArg(i, numargs)
	end if
	if (test = "-user") OR (test = "-u") then
		user = GetNextArg(i, numargs)
	end if
	if (test = "-pass") OR (test = "-p") then
		pass = GetNextArg(i, numargs)
	end if
	if (test = "-inst") OR (test = "-i") then
		inst = GetNextArg(i, numargs)
	end if
next

' Read username and password from stdin
if  not WScript.StdIn.AtEndOfStream then
	inpStr = WScript.StdIn.ReadLine
end if
if verbose then wscript.echo "stdin: " & inpStr

dim cred
cred = split(inpStr, " ")
user = cred(0)
pass = cred(1) 

if (host = "" or inst = "") then
	Err.Raise vbObjectError + 1, "", "Error processing arguments"
	CheckError("")
end if

dim service
dim running

service = split(inst,",")
redim running(ubound(service))

' Connect with target via WMI
Set objSWbemLocator = CreateObject("WbemScripting.SWbemLocator")
CheckError("")

if (user = "") or (lcase(user) = "none") then		' no authentication needed
	Set objWMIService = GetObject("winmgmts:" & "{impersonationLevel=impersonate}!\\" & host & "\root\cimv2") 
	CheckError("")
else						' authenticate with user/pass
	user = Replace(user,"\\","\")
	Set objWMIService = objSWbemLocator.ConnectServer (host, "\root\cimv2", user, pass)
	CheckError("")
	objWMIService.Security_.ImpersonationLevel = 3
end if

Set colItems = objWMIService.ExecQuery("Select Name, State from Win32_Service")
CheckError("")

' Massage data
For Each objItem in colItems
	for n=0 to ubound(service)
		if (lcase(objItem.Name) = lcase(service(n))) then
			running(n) = (lcase(objItem.State) = "running")
		end if
	next
Next
CheckError("")

returncode = 0

' Check that all services are running
for n=0 to ubound(service)
	if (running(n) = False) and (service(n) <> "") then 
		returncode = 2
		criticalreason = criticalreason & vbNewLine & "Service " & service(n) & " is not running."
	end if
next

' Build data output
output= "\{"

' Set reason based on returncode
select case returncode
	case 0:
		output = output & "reason:=""" & vbNewLine & "All services are running.""}"
	case 2:
		output = output & "reason:=""" & criticalreason & """}"
	case else:
		output = output & "reason:=""""}"	' make sure we always define the reason string
end select

wscript.echo output & "\B5\WMI Service Monitor\0P\"

for n=0 to ubound(service)
	if (service(n) <> "") then
		if (running(n) = False) then
			wscript.echo "\1\  " & service(n) &  " is not running.\0\"
		else
			wscript.echo "\4\  " & service(n) &  " is running.\0\"
		end if
	end if
next

' Write it and done
wscript.quit(returncode)
</tool:serv_mon.vbs>
