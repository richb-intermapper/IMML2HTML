<!-- 
Command Line WMI Probe to collect system information (com.dartware.wmi.system_information) 
Copyright (c) 2010 Dartware, LLC. All rights reserved. 
--> 

<header> 
	type			=	"cmd-line" 
	package			=	"com.dartware" 
	probe_name		=	"wmi.system_information" 
	human_name		=	"WMI System Information" 
	version			=	"1.7" 
	address_type	=	"IP"
	display_name	=	"WMI/WMI System Information"
	visible_in 		=	"Windows"
	flags			=	"NTCREDENTIALS"	
</header> 

<description> 
\GB\WMI System Information\p\ 

This probe uses WMI to collect a variety of information about the monitored host including hardware and operating system details.  The target host must be running Windows 2000 or later.

The User parameter may be a local user on the target host, or may take the form of "domain\\user" for a domain login.  Leave it blank if authentication is not required, such as when the target is the localhost.

InterMapper invokes the system_info.vbs companion script which was placed in the Tools folder of the InterMapper Settings folder when this probe was loaded.

</description> 

<parameters>
	User=""
	"Password*" = ""
	"Timeout (sec)"=""
</parameters> 


<command-line> 
	-- Empty path forces the InterMapper Settings:Tools directory
	path="" 
	cmd="${CSCRIPT} system_info.vbs"
	arg="-h ${address}"
	input = "${User} ${Password*}"
	timeout = ${Timeout (sec)}
</command-line> 

<command-exit>
	down:${EXIT_CODE}=3 
	critical:${EXIT_CODE}=2 
	alarm:${EXIT_CODE}=1 
	okay:${EXIT_CODE}=0 
</command-exit> 

<command-display>
${^stdout}
</command-display> 

<tool:system_info.vbs>
'Command Line WMI Probe for computer inventory (com.dartware.wmi.system_information.txt) 
'Copyright (c) 2009 Dartware, LLC. All rights reserved. 

On Error Resume Next

' get args up to next switch in case there are spaces in list
FUNCTION GetNextArg(j, nargs)
	arg = ""
	do until (j = nargs-1)
		if (instr(wscript.arguments(j+1), "-") = 1) then
			exit do
		else
			arg = arg & wscript.arguments(j+1)
			j = j + 1
		end if
	loop
	GetNextArg = arg
END FUNCTION

FUNCTION CheckError(reasonStr)
	if (err.number <> 0) then
		reasonStr = vbNewLine & reasonStr & "Error #" & CStr(Err.Number) & " " & Err.Description
		wscript.echo "\{reason:=""" & reasonStr & """}"
		wscript.quit(3)
	end if
END FUNCTION

FUNCTION SpaceOut(item, width)
	SpaceOut = item & space(width-len(item))
END FUNCTION

' Collect our arguments
host = ""
user = ""
pass = ""
verbose = False

numargs = wscript.arguments.count
for i=0 to numargs-1
	test = wscript.arguments(i)
	if (test = "-v") then verbose = True
	if (test = "-host") OR (test = "-h") then
		host = GetNextArg(i, numargs)
	end if
	if (test = "-user") OR (test = "-u") then
		user = GetNextArg(i, numargs)
	end if
	if (test = "-pass") OR (test = "-p") then
		pass = GetNextArg(i, numargs)
	end if
next

' Read username and password from stdin
if  not WScript.StdIn.AtEndOfStream then
	inpStr = WScript.StdIn.ReadLine
end if
if verbose then wscript.echo "stdin: " & inpStr

dim cred
cred = split(inpStr, " ")
user = cred(0)
pass = cred(1) 

if (host = "") then
	Err.Raise vbObjectError + 1, "", "Error processing arguments"
	CheckError("")
end if

' Connect with target via WMI
Set objSWbemLocator = CreateObject("WbemScripting.SWbemLocator")
CheckError("")

if (user = "") or (lcase(user) = "none") then		' no authentication needed
	Set objWMIService = GetObject("winmgmts:" & "{impersonationLevel=impersonate}!\\" & host & "\root\cimv2") 
	CheckError("")
else						' authenticate with user/pass
	user = Replace(user,"\\","\")
	Set objWMIService = objSWbemLocator.ConnectServer (host, "\root\cimv2", user, pass)
	CheckError("")
	objWMIService.Security_.ImpersonationLevel = 3
end if

body = ""

' Get computer system info, shouldn't be more than one
Set colItems = objWMIService.ExecQuery("Select Manufacturer, Model, TotalPhysicalMemory from Win32_ComputerSystem",,48)
CheckError("")

body = body & vbNewLine & "\#hide:sys_info\\4\System\0\\#begin:sys_info\"
For Each objItem in colItems
    memSize = formatnumber(((cdbl(objItem.TotalPhysicalMemory)/1024)/1024)/1024,1,vbTrue,vbFalse,vbFalse)
	body = body & vbNewLine & "   " & trim(objItem.Manufacturer) & " " & trim(objItem.Model)
	body = body & vbNewLine & "   RAM: " & memSize & " GB"
Next
CheckError("")

' Get serial number, shouldn't be more than one
Set colItems = objWMIService.ExecQuery("Select SerialNumber from Win32_SystemEnclosure",,48)
CheckError("")

For Each objItem in colItems
	body = body & vbNewLine & "   S/N: " & objItem.SerialNumber
Next
CheckError("")

' Get BIOS info, shouldn't be more than one
Set colItems = objWMIService.ExecQuery("Select SMBIOSBIOSVersion, Manufacturer from Win32_BIOS",,48)
CheckError("")

For Each objItem in colItems
	body = body & vbNewLine & "   BIOS: " & trim(objItem.Manufacturer) & " " & trim(objItem.SMBIOSBIOSVersion)
Next
CheckError("")

' Get display adapter, could be more than one
Set colItems = objWMIService.ExecQuery("Select DeviceName from Win32_DisplayConfiguration",,48)
CheckError("")

For Each objItem in colItems
	body = body & vbNewLine & "   Display: " & objItem.DeviceName
Next
CheckError("")

body = body & "\#end:sys_info\"

' Get Processor info, might be more than one
Set colItems = objWMIService.ExecQuery("Select * from Win32_Processor",,48)
CheckError("")

dim procName()	' colItems.Count won't work because WMI needs to enumerate the entire collection, to slow for VBscript
dim procSpeed()	' the redim in a loop below looks ugly, but is the more effecient choice

nP = 0
lName = 0
For Each objItem in colItems
	nP = nP + 1
	redim preserve procName(nP)
	redim preserve procSpeed(nP)
	
    procName(nP) = trim(objItem.Name)
	l = len(procName(nP))
	if (l > lName) then lName = l
    
    procSpeed(nP) = formatnumber(objItem.MaxClockSpeed,1,vbTrue,vbFalse,vbFalse)
Next
CheckError("")

body = body & vbNewLine & "\#hide:cpu_info\\4\Processor\0\\#begin:cpu_info\"
for n = 1 to nP
	body = body & vbNewLine & "   " & SpaceOut(procName(n),lName+4)
	body = body & vbNewLine & "     " & procSpeed(nP) & "Mhz"
Next
body = body & "\#end:cpu_info\"

' Get Disk drive info, might be more than one
Set colItems = objWMIService.ExecQuery("Select Caption, Size from Win32_DiskDrive",,48)
CheckError("")

dim diskSize()		' colItems.Count won't work because WMI needs to enumerate the entire collection, to slow for VBscript
dim diskCaption()	' the redim in a loop below looks ugly, but is the more effecient choice

nD = 0
lCaption = 0
For Each objItem in colItems
	nD = nD + 1
	redim preserve diskSize(nD)
	redim preserve diskCaption(nD)
	
    diskCaption(nD) = trim(objItem.Caption)
	l = len(diskCaption(nD))
	if (l > lCaption) then lCaption = l
    
    diskSize(nD) = formatnumber(((cdbl(objItem.Size)/1024)/1024)/1024,1,vbTrue,vbFalse,vbFalse)
Next
CheckError("")

body = body & vbNewLine & "\#hide:disk_info\\4\Disk\0\\#begin:disk_info\"
for n = 1 to nD
	body = body & vbNewLine & "   " & SpaceOut(diskCaption(n),lCaption+2) & diskSize(n) & " GB"
Next
body = body & "\#end:disk_info\"

' Get OS info
Set colItems = objWMIService.ExecQuery("SELECT * FROM Win32_OperatingSystem",,48)
CheckError("")

body = body & vbNewLine & "\#hide:os_info\\4\Operating System\0\\#begin:os_info\"
For Each objItem in colItems
	if (objItem.BuildNumber > 3999) then OSArch = objItem.OSArchitecture
	body = body & vbNewLine & "   " & objItem.Caption & " (" & objItem.Version & ")  " & OSArch
	body = replace(body,chr(153), "(TM)")
	body = replace(body,chr(174), "(R)")
	body = body & vbNewLine & "     " & objItem.CSDVersion
Next
CheckError("")
body = body & "\#end:os_info\"


' Get network adapter info, might be more than one
Set colItems = objWMIService.ExecQuery("Select Description, MACAddress, IPAddress From Win32_NetworkAdapterConfiguration Where IPEnabled = True",,48)
CheckError("")

dim description()		' colItems.Count won't work because WMI needs to enumerate the entire collection, to slow for VBscript
dim addrMAC()			' the redim in a loop below looks ugly, but is the more effecient choice
dim addrIP()

nN = 0
lDesc = 0
For Each objItem in colItems
	nN = nN + 1
	redim preserve description(nN)
	redim preserve addrMAC(nN)
	redim preserve addrIP(nN)
	
    description(nN) = objItem.Description
	l = len(description(nN))
	if (l > lDesc) then lDesc = l
    
    addrMAC(nN) = objItem.MACAddress
    
	arrIPAddresses = objItem.IPAddress
	For Each strAddress in arrIPAddresses
		addrIP(nN) = addrIP(nN) & " " & strAddress
	Next
Next
CheckError("")

body = body & vbNewLine & "\#hide:net_info\\4\Net\0\\#begin:net_info\"
for n = 1 to nN
	body = body & vbNewLine & "   " & SpaceOut(description(n),lDesc+2)
	body = body & vbNewLine & "     MAC: " & addrMAC(n) 
	body = body & vbNewLine & "     IP: " & addrIP(n)
Next
body = body & "\#end:net_info\"

' Build data output
wscript.echo "\{reason:=""""}"	' make sure we always define the reason string
wscript.echo "\B5\WMI System Information\0P\" & body

' Done
wscript.quit(0)
</tool:system_info.vbs>
