<!-- 
Command Line WMI Probe to check network utilization (com.dartware.wmi.net_utilization) 
Copyright (c) 2010 Dartware, LLC. All rights reserved. 
--> 

<header> 
	type			=	"cmd-line" 
	package			=	"com.dartware" 
	probe_name		=	"wmi.net_utilization" 
	human_name		=	"WMI Network Utilization" 
	version			=	"1.10" 
	address_type	=	"IP"
	display_name	=	"WMI/WMI Network Utilization"
	visible_in 		=	"Windows"
	flags			=	"NTCREDENTIALS"	
</header> 

<description> 
\GB\WMI Network Utilization\p\ 

This probe uses WMI to retrieve the network utilization on an interface on the target host.  Specifically, it queries the BytesTotalPersec, CurrentBandwidth, OutputQueueLength and PacketsReceivedErrors properties of the Win32_PerfFormattedData_Tcpip_NetworkInterface class.  It compares OutputQueueLength against the Warning and Critical parameters you set.  The target host must be running Windows XP, Windows Server 2003 or later.

The interface may be selected by IP Address, MAC Address, or Index.  You may use colons, hyphens or no separators when specifiying a MAC address.  The interface name is queried from the Win32_NetworkAdapterConfiguration class and used to query data from the Win32_PerfFormattedData_Tcpip_NetworkInterface class.

The User parameter may be a local user on the target host, or may take the form of "domain\\user" for a domain login.  Leave it blank if authentication is not required, such as when the target is the localhost.

InterMapper invokes the net_util.vbs companion script which was placed in the Tools folder of the InterMapper Settings folder when this probe was loaded.  It uses the exit value to set the condition of the device and the performance data returned by the script to create a nice display of chartable data.

</description> 

<parameters>
	"IP Address"=""
	"MAC Address"=""
	Index=0
	Warning="20"
	Critical="10"
	User=""
	"Password*" = ""
	"Timeout (sec)"=""
</parameters> 


<command-line> 
	-- Empty path forces the InterMapper Settings:Tools directory
	path="" 
	cmd="${CSCRIPT} net_util.vbs"
	arg="-h ${address} -i ${IP Address},${MAC Address},${Index} -w ${Warning} -c ${Critical}"
	input = "${User} ${Password*}"
	timeout = ${Timeout (sec)}
</command-line> 

<command-exit>
	down:${EXIT_CODE}=3 
	critical:${EXIT_CODE}=2 
	alarm:${EXIT_CODE}=1 
	okay:${EXIT_CODE}=0 
</command-exit> 

<command-display>
${^stdout}
</command-display> 

<tool:net_util.vbs>
'Command Line WMI Probe to check network utilization (to be used with com.dartware.wmi.net_utilization) 
'Copyright (c) 2009 Dartware, LLC. All rights reserved. 

On Error Resume Next

' get args up to next switch in case there are spaces in list
FUNCTION GetNextArg(j, nargs)
	arg = ""
	do until (j = nargs-1)
		if (instr(wscript.arguments(j+1), "-") = 1) then
			exit do
		else
			arg = arg & wscript.arguments(j+1)
			j = j + 1
		end if
	loop
	GetNextArg = arg
END FUNCTION

FUNCTION CheckError(reasonStr)
	if (err.number <> 0) then
		reasonStr = vbNewLine & reasonStr & "Error #" & CStr(Err.Number) & " " & Err.Description
		wscript.echo "\{reason:=""" & reasonStr & """}"
		wscript.quit(3)
	end if
END FUNCTION

' Collect our arguments
host = ""
user = ""
pass = ""
inst = ""
warn = ""
crit = ""
verbose = False

numargs = wscript.arguments.count
for i=0 to numargs-1
	test = wscript.arguments(i)
	if (test = "-v") then verbose = True
	if (test = "-host") OR (test = "-h") then
		host = GetNextArg(i, numargs)
	end if
	if (test = "-user") OR (test = "-u") then
		user = GetNextArg(i, numargs)
	end if
	if (test = "-pass") OR (test = "-p") then
		pass = GetNextArg(i, numargs)
	end if
	if (test = "-inst") OR (test = "-i") then
		inst = GetNextArg(i, numargs)
	end if
	if (test = "-warn") OR (test = "-w") then
		warn = GetNextArg(i, numargs)
		if (warn <> "") then warn = ccur(warn)
	end if
	if (test = "-crit") OR (test = "-c") then
		crit = GetNextArg(i, numargs)
		if (crit <> "") then crit = ccur(crit)
	end if
next

' Read username and password from stdin
if  not WScript.StdIn.AtEndOfStream then
	inpStr = WScript.StdIn.ReadLine
end if
if verbose then wscript.echo "stdin: " & inpStr

dim cred
cred = split(inpStr, " ")
user = cred(0)
pass = cred(1) 

if (host = "" or warn = "" or crit = "") then
	Err.Raise vbObjectError + 1, "", "Error processing arguments"
	CheckError("")
end if

dim selector

selector = split(inst,",")

' Connect with target via WMI
strComputer = host
Set objSWbemLocator = CreateObject("WbemScripting.SWbemLocator")
CheckError("")

if (user = "") or (lcase(user) = "none") then		' no authentication needed
	Set objWMIService = GetObject("winmgmts:" & "{impersonationLevel=impersonate}!\\" & strComputer & "\root\cimv2") 
	CheckError("")
else						' authenticate with user/pass
	user = Replace(user,"\\","\")
	Set objWMIService = objSWbemLocator.ConnectServer (strComputer, "\root\cimv2", user, pass)
	CheckError("")
	objWMIService.Security_.ImpersonationLevel = 3
end if

'strTargetAddress = inst
Set colItems = objWMIService.ExecQuery("Select * From Win32_NetworkAdapterConfiguration Where IPEnabled = True")
CheckError("")

' Build query
query = "Select * from Win32_PerfFormattedData_Tcpip_NetworkInterface"

if (instr(1, inst, "all", vbTextCompare) = 0) then		' do not list all interfaces
	For Each objItem in colItems
		if (selector(0) <> "") then			' ip address
			arrIPAddresses = objItem.IPAddress
			For Each strAddress in arrIPAddresses
				If strAddress = selector(0) Then strDescription = objItem.Description
			Next
		elseif (selector(1) <> "") then	' mac address
			if (replace(objItem.MACAddress,":","") = replace(replace(selector(1),"-",""),":","")) then strDescription = objItem.Description
		elseif (selector(2) <> "") then	' index
			if (objItem.Index = cint(selector(2))) then strDescription = objItem.Description
		end if
	Next
	query = query & " Where Name = '" & strDescription & "'"
end if
CheckError("")

query = replace(query, "(", "[")
query = replace(query, ")", "]")
query = replace(query, "/", "_")
query = replace(query, "#", "_")

' Execute query
Set colItems = objWMIService.ExecQuery(query,,48)
CheckError("")

' Massage data
dim Name()			' colItems.Count won't work because WMI needs to enumerate the entire collection, to slow for VBscript
dim CurrentBandwidth()	' the redim in a loop below looks ugly, but is the more effecient choice
dim BytesTotalPersec()	' the redim in a loop below looks ugly, but is the more effecient choice
dim OutputQueueLength()
dim PacketsReceivedErrors()

nP = 0
For Each objItem in colItems
	nP = nP + 1
	redim preserve Name(nP)
	redim preserve CurrentBandwidth(nP)
	redim preserve BytesTotalPersec(nP)
	redim preserve OutputQueueLength(nP)
	redim preserve PacketsReceivedErrors(nP)

	Name(nP) = objItem.Name
	CurrentBandwidth(nP) = objItem.CurrentBandwidth
	BytesTotalPersec(nP) = objItem.BytesTotalPersec
	OutputQueueLength(nP) = objItem.OutputQueueLength
	PacketsReceivedErrors(nP) = objItem.PacketsReceivedErrors
Next
CheckError("")

' Evaluate criteria to set returncode
criticalreason = ""
warningreason = ""
returncode = 0
for n=1 to nP
	if (OutputQueueLength(n) > crit) then 
		returncode = 2
		criticalreason = criticalreason & vbNewLine & "Output Queue Length for " & Name(n) & " is above " & crit & " packets"
	elseif (OutputQueueLength(n) > warn) then 
		if (returncode < 2) then 
			returncode = 1
			warningreason = warningreason & vbNewLine & "Output Queue Length for " & Name(n) & " is above " & warn & " packets"
		end if
	end if
next

' Build data output
output= "\{"
for n=1 to nP
	output = output & "BytesTotalPersec" & n & ":=" & formatnumber(BytesTotalPersec(n),0,vbTrue,vbFalse,vbFalse) & ","
	output = output & "CurrentBandwidth" & n & ":=" & formatnumber(CurrentBandwidth(n),0,vbTrue,vbFalse,vbFalse) & ","
	output = output & "PacketsReceivedErrors" & n & ":=" & formatnumber(PacketsReceivedErrors(n),0,vbTrue,vbFalse,vbFalse) & ","
	output = output & "OutputQueueLength" & n & ":=" & formatnumber(OutputQueueLength(n),0,vbTrue,vbFalse,vbFalse) & ","
next

' Set reason based on returncode
output = output & "reason:="""
select case returncode
	case 0:
		if (nP = 0) then
			output = output & "No interface was selected."
		else
			output = output & "Output Queue Length is below " & warn & " packets"
		end if
	case 1:
		output = output & warningreason
	case 2:
		output = output & criticalreason
end select
output = output & """}"

if (selector(0) <> "") then			' ip address
	wscript.echo output & "\B5\WMI Network Utilization for " & selector(0) & "\0P\"
elseif (selector(1) <> "") then	' mac address
	wscript.echo output & "\B5\WMI Network Utilization for " & selector(1) & "\0P\"
elseif (selector(2) <> "") then	' index
	wscript.echo output & "\B5\WMI Network Utilization for Index " & selector(2) & "\0P\"
end if

for n=1 to nP
	wscript.echo "\B4\" & Name(n) & "\P0\"
	wscript.echo "    \4\Bytes Total Persec:       \0\ $BytesTotalPersec" & n & " Bps"
	wscript.echo "    \4\Current Bandwidth:        \0\ $CurrentBandwidth" & n & " bps"
	wscript.echo "    \4\Packets Received Errors:  \0\ $PacketsReceivedErrors" & n
	wscript.echo "    \4\Output Queue Length:      \0\ $OutputQueueLength" & n
next

' Done
wscript.quit(returncode)
</tool:net_util.vbs>