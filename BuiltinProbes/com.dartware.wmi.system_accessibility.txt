<!-- 
Command Line WMI Probe to check system accessibility (com.dartware.wmi.system_accessibility) 
Copyright (c) 2010 Dartware, LLC. All rights reserved. 
--> 

<header> 
	type			=	"cmd-line" 
	package			=	"com.dartware" 
	probe_name		=	"wmi.system_accessibility" 
	human_name		=	"WMI System Accessibility" 
	version			=	"1.9" 
	address_type	=	"IP"
	display_name	=	"WMI/WMI System Accessibility"
	visible_in 		=	"Windows"
	flags			=	"NTCREDENTIALS"	
</header> 

<description> 
\GB\WMI System Accessibility\p\ 

This probe uses WMI to test accessibilty of a target device from the monitored host.  Specifically, it uses the Win32_PingStatus class to test the connectivity and returns a response time which is chartable.  If the target cannot be pinged, the status is set to critical and a discontiunity is inserted in the chart data.  The target host must be running Windows XP, Windows Server 2003 or later.

Additional information about the monitored host is queried from the Win32_NetworkAdapterConfiguration and Win32_NTDomain classes and displayed in the status window.

The User parameter may be a local user on the target host, or may take the form of "domain\\user" for a domain login.  Leave it blank if authentication is not required, such as when the target is the localhost.

InterMapper invokes the sys_access.vbs companion script which was placed in the Tools folder of the InterMapper Settings folder when this probe was loaded.  It uses the exit value to set the condition of the device and the performance data returned by the script to create a nice display of chartable data.

</description> 

<parameters>
	Target=""
	"Warning (msec)"="200"
	"Critical (msec)"="1000"
	User=""
	"Password*" = ""
	"Timeout (sec)"=""
</parameters> 


<command-line> 
	-- Empty path forces the InterMapper Settings:Tools directory
	path="" 
	cmd="${CSCRIPT} sys_access.vbs"
	arg="-h ${address} -t ${Target} -w ${Warning (msec)} -c ${Critical (msec)}"
	input = "${User} ${Password*}"
	timeout = ${Timeout (sec)}
</command-line> 

<command-exit>
	down:${EXIT_CODE}=3 
	critical:${EXIT_CODE}=2 
	alarm:${EXIT_CODE}=1 
	okay:${EXIT_CODE}=0 
</command-exit> 

<command-display>
${^stdout}
</command-display> 

<tool:sys_access.vbs>
'Command Line WMI Probe to check system accessibility (to be used with com.dartware.wmi.system_accessibility) 
'Copyright (c) 2009 Dartware, LLC. All rights reserved. 

On Error Resume Next

' get args up to next switch in case there are spaces in list
FUNCTION GetNextArg(j, nargs)
	arg = ""
	do until (j = nargs-1)
		if (instr(wscript.arguments(j+1), "-") = 1) then
			exit do
		else
			arg = arg & wscript.arguments(j+1)
			j = j + 1
		end if
	loop
	GetNextArg = arg
END FUNCTION

FUNCTION CheckError(reasonStr)
	if (err.number <> 0) then
		reasonStr = vbNewLine & reasonStr & "Error #" & CStr(Err.Number) & " " & Err.Description
		wscript.echo "\{reason:=""" & reasonStr & """}"
		wscript.quit(3)
	end if
END FUNCTION

' Collect our arguments
host = ""
user = ""
pass = ""
targ = ""
warn = ""
crit = ""
verbose = False

numargs = wscript.arguments.count
for i=0 to numargs-1
	test = wscript.arguments(i)
	if (test = "-v") then verbose = True
	if (test = "-host") OR (test = "-h") then
		host = GetNextArg(i, numargs)
	end if
	if (test = "-user") OR (test = "-u") then
		user = GetNextArg(i, numargs)
	end if
	if (test = "-pass") OR (test = "-p") then
		pass = GetNextArg(i, numargs)
	end if
	if (test = "-targ") OR (test = "-t") then
		targ = GetNextArg(i, numargs)
	end if
	if (test = "-warn") OR (test = "-w") then
		warn = GetNextArg(i, numargs)
		if (warn <> "") then warn = ccur(warn)
	end if
	if (test = "-crit") OR (test = "-c") then
		crit = GetNextArg(i, numargs)
		if (crit <> "") then crit = ccur(crit)
	end if
next

' Read username and password from stdin
if  not WScript.StdIn.AtEndOfStream then
	inpStr = WScript.StdIn.ReadLine
end if
if verbose then wscript.echo "stdin: " & inpStr

dim cred
cred = split(inpStr, " ")
user = cred(0)
pass = cred(1) 

if (host = "" or targ = "" or warn = "" or crit = "") then
	Err.Raise vbObjectError + 1, "", "Error processing arguments"
	CheckError("")
end if

' Connect with target via WMI
strComputer = host
Set objSWbemLocator = CreateObject("WbemScripting.SWbemLocator")
CheckError("")

if (user = "") or (lcase(user) = "none") then		' no authentication needed
	Set objWMIService = GetObject("winmgmts:" & "{impersonationLevel=impersonate}!\\" & strComputer & "\root\cimv2") 
	CheckError("")
else						' authenticate with user/pass
	user = Replace(user,"\\","\")
	Set objWMIService = objSWbemLocator.ConnectServer (strComputer, "\root\cimv2", user, pass)
	CheckError("")
	objWMIService.Security_.ImpersonationLevel = 3
end if

Set colItems = objWMIService.ExecQuery("Select * From Win32_PingStatus where TimeOut = 10000 and Address = '" & targ & "'")
CheckError("")

For Each objItem in colItems
	StatusCode = objItem.StatusCode
	Address = objItem.Address
	ProtocolAddress = cstr(objItem.ProtocolAddress)
	ResponseTime = objItem.ResponseTime
Next
CheckError("")

' Get network values
Set colItems = objWMIService.ExecQuery("Select * From Win32_NetworkAdapterConfiguration Where IPEnabled = True")
CheckError("")

For Each objItem in colItems
	na = 0
	For Each IPAddr in objItem.IPAddress
		If IPAddr = host Then 					' found a match
			IPAddress = objItem.IPAddress(na)
			IPSubnet = objItem.IPSubnet(na)
			DefaultIPGateway = objItem.DefaultIPGateway(na)
			MACAddress = objItem.MACAddress
			exit for
		end if
		na = na + 1
	Next
Next
CheckError("")

' Execute query for AD information
Set colItems = objWMIService.ExecQuery("Select * from Win32_NTDomain Where Status = 'OK'",,48)
CheckError("")

For Each objItem in colItems
	ClientSiteName = objItem.ClientSiteName
	DCSiteName = objItem.DCSiteName
	DomainName = objItem.DomainName
Next
CheckError("")

' Evaluate criteria to set returncode
if (StatusCode <> 0) then 
	returncode = 2
	reason = vbNewLine & "Ping target " & targ & " failed with a status code of " & StatusCode & ""
elseif (ResponseTime > crit) then 
	returncode = 2
	reason = vbNewLine & "Response time for " & targ & " is above " & crit & " ms"
elseif (ResponseTime > warn) then 
	returncode = 1
	reason = vbNewLine & "Response time for " & targ & " is above " & warn & " ms"
else
	returncode = 0
	reason = vbNewLine & "Response time for " & targ & " is below " & warn & " ms"
end if

' Build data output
output = "\{"
if (StatusCode = 0 ) then 
	output = output & "ResponseTime:=" & ResponseTime & ","
else
	output = output & "ResponseTime:=0,"
end if

' Set reason based on returncode
output = output & "reason:=""" & reason & """}"

	wscript.echo output & "\B5\WMI System Accessibility from " & host & " to " & targ & "\0P\"
	wscript.echo "    \4\IP Address:\0\         " & IPAddress
	wscript.echo "    \4\IP Subnet:\0\          " & IPSubnet
	wscript.echo "    \4\MAC Address:\0\        " & MACAddress
	wscript.echo "    \4\Default IP Gateway:\0\ " & DefaultIPGateway
	wscript.echo "    \4\Client Site Name:\0\   " & ClientSiteName
	wscript.echo "    \4\DC Site Name:\0\       " & DCSiteName
	wscript.echo "    \4\Domain Name:\0\        " & DomainName

	wscript.echo vbNewLine & "    \4\Target Address:\0\     " & Address
	if (StatusCode = 0 ) then 
		wscript.echo "    \4\Protocol Address:\0\   " & ProtocolAddress
		wscript.echo "    \4\Response Time:\0\      $ResponseTime ms"
	end if

' Done
wscript.quit(returncode)
</tool:sys_access.vbs>
