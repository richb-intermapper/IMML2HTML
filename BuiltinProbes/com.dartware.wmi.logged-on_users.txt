<!-- 
Command Line WMI Probe to list logged-on users (com.dartware.wmi.logged-on_users) 
Copyright (c) 2010 Dartware, LLC. All rights reserved. 
--> 

<header> 
	type			=	"cmd-line" 
	package			=	"com.dartware" 
	probe_name		=	"wmi.logged-on_users" 
	human_name		=	"WMI Logged-on Users" 
	version			=	"1.10" 
	address_type	=	"IP"
	display_name	=	"WMI/WMI Logged-on Users"
	visible_in		=	"Windows"	
	flags			=	"NTCREDENTIALS"	
</header> 

<description> 
\GB\WMI Logged-on Users\p\ 

This probe uses WMI to retrieve information about users logged on to the target host.  Specifically, it queries the LogonType and StartTime properties of the Win32_LogonSession class, limiting the selection to those in the comma-separated list of numeric Logon Types you set in the Type parameter.  It queries instances of the Win32_LoggedOnUser class, matches the LogonID and extracts the user's name and domain from the path of the Win32_Account.  The target host must be running Windows XP, Windows Server 2003 or later.

The User parameter may be a local user on the target host, or may take the form of "domain\\user" for a domain login.  Leave it blank if authentication is not required, such as when the target is the localhost.

InterMapper invokes the log_users.vbs companion script which was placed in the Tools folder of the InterMapper Settings folder when this probe was loaded.

</description> 

<parameters>
	Type="2,10"
	User=""
	"Password*" = ""
	"Timeout (sec)"="60"
</parameters> 


<command-line> 
	-- Empty path forces the InterMapper Settings:Tools directory
	path="" 
	cmd="${CSCRIPT} log_users.vbs"
	arg="-h ${address} -t ${Type}"
	input = "${User} ${Password*}"
	timeout = ${Timeout (sec)}
</command-line> 

<command-exit>
	down:${EXIT_CODE}=3 
	critical:${EXIT_CODE}=2 
	alarm:${EXIT_CODE}=1 
	okay:${EXIT_CODE}=0 
</command-exit> 

<command-display>
${^stdout}
</command-display> 

<tool:log_users.vbs>
'Command Line WMI Probe to monitor logged-on users (to be used with com.dartware.wmi.logged-on_users) 
'Copyright (c) 2009 Dartware, LLC. All rights reserved. 

On Error Resume Next


' get args up to next switch in case there are spaces in list
FUNCTION GetNextArg(j, nargs)
	arg = ""
	do until (j = nargs-1)
		if (instr(wscript.arguments(j+1), "-") > 0) then
			exit do
		else
			arg = arg & wscript.arguments(j+1)
			j = j + 1
		end if
	loop
	GetNextArg = arg
END FUNCTION

FUNCTION CheckError(reasonStr)
	if (err.number <> 0) then
		reasonStr = vbNewLine & reasonStr & "Error #" & CStr(Err.Number) & " " & Err.Description
		wscript.echo "\{reason:=""" & reasonStr & """}"
		wscript.quit(3)
	end if
END FUNCTION

FUNCTION SpaceOut(item, width)
	SpaceOut = item & space(width-len(item))
END FUNCTION

' Collect our arguments
host = ""
user = ""
pass = ""
ltyp = ""
verbose = False

numargs = wscript.arguments.count
for i=0 to numargs-1
	test = wscript.arguments(i)
	if (test = "-v") then verbose = True
	if (test = "-host") OR (test = "-h") then
		host = GetNextArg(i, numargs)
	end if
	if (test = "-user") OR (test = "-u") then
		user = GetNextArg(i, numargs)
	end if
	if (test = "-pass") OR (test = "-p") then
		pass = GetNextArg(i, numargs)
	end if
	if (test = "-type") OR (test = "-t") then
		ltyp = GetNextArg(i, numargs)
	end if
next

' Read username and password from stdin
if  not WScript.StdIn.AtEndOfStream then
	inpStr = WScript.StdIn.ReadLine
end if
if verbose then wscript.echo "stdin: " & inpStr

dim cred
cred = split(inpStr, " ")
user = cred(0)
pass = cred(1) 

if (host = "") then
	Err.Raise vbObjectError + 1, "", "Error processing arguments"
	CheckError("")
end if

dim types

types = split(ltyp,",")

query = "Select * from Win32_LogonSession"
if (ltyp <> "") then
	for i = 0 to ubound(types)
		if (i = 0) then
			query = query & " where ("
		else
			query = query & " or "
		end if
		query = query & "LogonType = " & types(i)
	next
	query = query & ")"
end if

' Connect with target via WMI
Set objSWbemLocator = CreateObject("WbemScripting.SWbemLocator")
CheckError("")

if (user = "") or (lcase(user) = "none") then		' no authentication needed
	Set objWMIService = GetObject("winmgmts:" & "{impersonationLevel=impersonate}!\\" & host & "\root\cimv2") 
	CheckError("")
else						' authenticate with user/pass
	user = Replace(user,"\\","\")
	Set objWMIService = objSWbemLocator.ConnectServer (host, "\root\cimv2", user, pass)
	CheckError("")
	objWMIService.Security_.ImpersonationLevel = 3
end if

' Execute query
if verbose then wscript.echo "query = " & query
set colSessions = objWMIService.ExecQuery(query)  
CheckError("")

' Create onject for date handling
Set objSWbemDateTime = CreateObject("WbemScripting.SWbemDateTime")
CheckError("")

if colSessions.Count = 0 Then
	Wscript.Echo "\{reason:=""No logged-on users found.""}"
else
	Wscript.Echo "\{reason:=""""}"	' make sure we always define the reason string
	wscript.echo "\B5\WMI Logged-on Users\0P\"
	wscript.echo "  \4\" & SpaceOut("User",20) & SpaceOut("Domain",20) & SpaceOut("Session Start Time",22) & "Logon Type" & "\0\"
	For Each objSession in colSessions
		body = "  "
		select case objSession.LogonType
			case 0:
				strLogonType = "System(0)"
			case 2:
				strLogonType = "Interactive(2)"
			case 3:
				strLogonType = "Network(3)"
			case 4:
				strLogonType = "Batch(4)"
			case 5:
				strLogonType = "Service(5)"
			case 6:
				strLogonType = "Proxy(6)"
			case 7:
				strLogonType = "Unlock(7)"
			case 8:
				strLogonType = "NetworkCleartext(8)"
			case 9:
				strLogonType = "NewCredentials(9)"
			case 10:
				strLogonType = "RemoteInteractive(10)"
			case 11:
				strLogonType = "CachedInteractive(11)"
			case 12:
				strLogonType = "CachedRemoteInteractive(12)"
			case 13:
				strLogonType = "CachedUnlock(13)"
		end select

		objSWbemDateTime.Value = objSession.StartTime
		
		Set colList = objWMIService.ExecQuery("SELECT * FROM Win32_LoggedOnUser") 
		For Each objItem in colList
			Set objD = objWMIService.Get(objItem.dependent)
			if (objD.LogonID = objSession.LogonId) then
				strObjPathAccount = objItem.Antecedent
				
				i = instr(strobjPathAccount, "Domain=""") + 8
				l = instr(i, strobjPathAccount, """") - i
				Domain = mid(strobjPathAccount, i, l)
				
				i = instr(strobjPathAccount, "Name=""") + 6
				l = instr(i, strobjPathAccount, """") - i
				Name = mid(strobjPathAccount, i, l)
			end if
		Next  

		body = body & SpaceOut(Name,20)
		body = body & SpaceOut(Domain,20)
		body = body & SpaceOut(objSWbemDateTime.GetVarDate(True),22)
		body = body & strLogonType
		wscript.echo body
	Next
end if

wscript.quit(0)
</tool:log_users.vbs>