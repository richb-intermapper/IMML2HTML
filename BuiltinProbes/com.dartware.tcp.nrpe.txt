<!-- 
	NRPE (com.dartware.tcp.nrpe)
	Copyright Â© 2009 Dartware, LLC. All rights reserved.
-->

<header>
	type			= 	"tcp-script"
	package			= 	"com.dartware"
	probe_name		=	"tcp.nrpe"
	human_name		=	"Nagios NRPE"
	version			= 	"1.2"
	address_type	= 	"IP"
	port_number		=	"5666"

	display_name	=	"Servers-Proprietary/Nagios NRPE"
</header>

<description>

\gb0\Nagios NRPE over SSL/TLS\p\

The NRPE ("Nagios Remote Plugin Executor") protocol defines a way to execute Nagios plugins on remote machines. After you install a Nagios NRPE daemon and and one or more Nagios plugins on a remote machine, InterMapper uses the following procedure to retrieve the status of that machine.

* Establish an encrypted SSL/TLS connection to the remote NRPE daemon
* Request that a specific Nagios plugin be executed
* Receive the response from the plugin
* Parse the response and display the state of that machine.

The NRPE daemon uses a configuration file (\i\nrpe.cfg\p\) that has command definition entries in this form:

\m-\  command[check_swap]=/usr/local/nagios/libexec/check_swap -w 20% -c 10%\g+\

When the NRPE daemon receives a request to run the "check_swap" plugin, it issues the command above.

The \i\Nagios Plugin\p\ paramenter tells which plugin to execute. It must match one of the command definitions in the nrpe.cfg file, e.g., the text within square brackets [ ... ]. To test the connection from InterMapper to the NRPE daemon, set \i\Nagios Plugin\p\ to the value "_NRPE_CHECK".

For information about installing an NRPE daemon, see the \u2=http://nagios.sourceforge.net/docs/nrpe/NRPE.pdf\NRPE Documentation\p0\ (at http://nagios.sourceforge.net/docs/nrpe/NRPE.pdf), especially the section on Remote Host Configuration. Nagios and the Nagios logo are registered trademarks of Ethan Galstad. For more information, see \u2\http://www.nagios.org.\p0\ 
</description>

<parameters>

"Nagios Plugin"		=	"_NRPE_CHECK"

</parameters>

<script>

CONN #60 (connect timeout in secs) "SECURE:ADH"
WAIT #30 @IDLE (idle timeout in secs)

-- Let's use NRPE version 2 packets
STOR "nagios_proto_version"  "2"

-- Generate NRPE request in $buf
STOR "gibberish
EVAL $buf := "" + pack($nagios_proto_version, ">S") + pack(1, ">S") + pack(0, ">L") + pack(1, ">S") + "${Nagios Plugin}" + "\x00" + substr("$gibberish", 0, 1024 - strlen("${Nagios Plugin}")) + "\x00"
STOR "gibberish" ""

-- Compute crc of $buf and inject it into $cmd
EVAL $crc := crc32("$buf")
EVAL $cmd := "" + substr("$buf", 0, 4) + pack($crc, ">L") + substr("$buf", 8)

-- Send $cmd and receive response in $buf
LINE #1036
SEND "$cmd"
RECV "buf"

-- Check actual and expected crc values
EVAL $actual_crc := unpack(substr("$buf", 4, 4), ">L")
EVAL $expected_crc := crc32("" + substr("$buf", 0, 4) + pack(0, ">L") + substr("$buf", 8))
NBNE #$expected_crc #$actual_crc @BAD_CRC

-- Check packet version
EVAL $vers := unpack(substr("$buf", 0, 2), ">S")
NBNE #$vers #$nagios_proto_version @UNKNOWN_VERSION

-- Check packet type
EVAL $type := unpack(substr("$buf", 2, 2), ">S")
NBNE #$type #2 @UNKNOWN_TYPE

-- Use sprintf to extract portion of string up to \x00.
EVAL $msg := sprintf("%s", substr("$buf", 10))

-- Split perfdata out of mesg.
EVAL $has_perf := ($msg =~ "(.*)| *([^|]+)$")
NBNE #$has_perf #0 #+3
STOR "perf" ""
GOTO #+3
STOR "msg" "${1}"
STOR "perf" "${2}"

-- Process performance data
STOR "^perf_output" ""
@PERF_BEGIN:
CHCK "$perf" else goto @PERF_DONE
EVAL $more := ($perf =~ "^ ?([^=]+)=([0-9.]+)([A-Za-z]*)[;0-9]+(.*)$")
NBNE #$more #1 @PERF_DONE
STOR "perf-${1}" "${2}"
SCAT "^perf_output" "\n\\4\\  perf-${1}:\\0\\ $${perf-${1}} ${3}"
STOR "perf" "${4}"
GOTO @PERF_BEGIN
@PERF_DONE:

-- Check results
EVAL $result := unpack(substr("$buf", 8, 2), ">S")
NBNE #$result #3 #+2
DONE DOWN "$msg"
NBNE #$result #2 #+2
DONE CRIT "$msg"
NBNE #$result #1 #+2
DONE ALRM "$msg"
DONE OKAY "$msg"


@IDLE:
DONE DOWN "[NRPE] ${Nagios Plugin}: No data for ${_IDLETIMEOUT} seconds."

@BAD_CRC:
DONE DOWN "[NRPE] ${Nagios Plugin}: Response failed the CRC check. (expected $expected_crc, received $actual_crc)"

@UNKNOWN_VERSION:
DONE DOWN "[NRPE] ${Nagios Plugin}: Unknown protocol version: $vers"

@UNKNOWN_TYPE:
DONE DOWN "[NRPE] ${Nagios Plugin}: Unknown packet type: $type"

</script>


<script-output>
\5B\Nagios Performance Data\P0\
  \4\Plugin:\0\ ${Nagios Plugin}${^perf_output}
</script-output>