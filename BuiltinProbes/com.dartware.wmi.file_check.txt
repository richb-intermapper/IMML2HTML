<!-- 
Command Line WMI Probe to check for file changes (com.dartware.wmi.file_check) 
Copyright (c) 2010 Dartware, LLC. All rights reserved. 
--> 

<header> 
	type			=	"cmd-line" 
	package			=	"com.dartware" 
	probe_name		=	"wmi.file_check" 
	human_name		=	"WMI File Check" 
	version			=	"1.9" 
	address_type	=	"IP"
	display_name	=	"WMI/WMI File Check"
	visible_in 		=	"Windows"
	flags			=	"NTCREDENTIALS"	
</header> 

<description> 
\GB\WMI File Check\p\ 

This probe uses WMI to retrieve information about files on the target host.  Specifically, it queries the CIM_DataFile class, limiting the search with the parameters you set.  The target host must be running Windows 2000 or later.

The Path parameter specifies the location of the files you wish to check.  It should include the drive and be enclosed in double-quotes if it contains spaces.  

The File parameter contains the filename and extension of the file you wish to check.  The path will be prepended to it during the final query.  If it is blank, all files in the folder specified by the Path that meet the Size or time criteria will be listed.  File may also be set to a list of comma-separated filenames which will each be prepended by the Path and used as query criteria.  

Wildcards (* ?) may be used in the filename.  If wildcards are used, be sure to specify the Path parameter or the query might take an inordinate amount of time.  At least one of the File or Path parameters must be set.

The Size parameter defines the minimum filesize criteria in bytes.  Any files larger than this value will be listed.  The Hours, Minutes and Seconds parameters combine to define how recently the file had to be changed to be listed.  These parameters are subtracted from the current time and used to select files based on their LastModified value.  At least one of these parametrs must be set.

The User parameter may be a local user on the target host, or may take the form of "domain\\user" for a domain login.  Leave it blank if authentication is not required, such as when the target is the localhost.

InterMapper invokes the file_chk.vbs companion script which was placed in the Tools folder of the InterMapper Settings folder when this probe was loaded.  It lists the files which meet your criteria and uses the exit value to set the condition of the device.

</description> 

<parameters>
	Path="C:\"
	File=""
	Size=""
	Hours="1"
	Minutes=""
	Seconds=""
	User=""
	"Password*"=""
	"Timeout (sec)"=""
</parameters> 


<command-line> 
	-- Empty path forces the InterMapper Settings:Tools directory
	path="" 
	cmd="${CSCRIPT} file_chk.vbs"
	arg="-h ${address} -d ${Path} -f ${File} -t ${Hours}:${Minutes}:${Seconds} -s ${Size}"
	input = "${User} ${Password*}"
	timeout = ${Timeout (sec)}
</command-line> 

<command-exit>
	down:${EXIT_CODE}=3 
	critical:${EXIT_CODE}=2 
	alarm:${EXIT_CODE}=1 
	okay:${EXIT_CODE}=0 
</command-exit> 

<command-display>
${^stdout}
</command-display> 

<tool:file_chk.vbs>
'Command Line WMI Probe to check for file changes (to be used with com.dartware.wmi.file_check)
'Copyright (c) 2009 Dartware, LLC. All rights reserved. 

On Error Resume Next

' get args up to next switch in case there are spaces in list
FUNCTION GetNextArg(j, nargs)
	arg = ""
	do until (j = nargs-1)
		if (instr(wscript.arguments(j+1), "-") = 1) then
			exit do
		else
			arg = arg & wscript.arguments(j+1)
			j = j + 1
		end if
	loop
	GetNextArg = arg
END FUNCTION

FUNCTION CheckError(reasonStr)
	if (err.number <> 0) then
		reasonStr = vbNewLine & reasonStr & "Error #" & CStr(Err.Number) & " " & Err.Description
		wscript.echo "\{reason:=""" & reasonStr & """}"
		wscript.quit(3)
	end if
END FUNCTION

' Collect our arguments
host = ""
user = ""
pass = ""
file = ""
tim = ""
warn = ""
path = ""
verbose = False

numargs = wscript.arguments.count
for i=0 to numargs-1
	test = wscript.arguments(i)
	if (test = "-v") then verbose = True
	if (test = "-host") OR (test = "-h") then
		host = GetNextArg(i, numargs)
	end if
	if (test = "-user") OR (test = "-u") then
		user = GetNextArg(i, numargs)
	end if
	if (test = "-pass") OR (test = "-p") then
		pass = GetNextArg(i, numargs)
	end if
	if (test = "-dir") OR (test = "-d") then
		path = GetNextArg(i, numargs)
	end if
	if (test = "-time") OR (test = "-t") then
		tim = GetNextArg(i, numargs)
	end if
	if (test = "-file") OR (test = "-f") then
		file = GetNextArg(i, numargs)
	end if
	if (test = "-size") OR (test = "-s") then
		size = GetNextArg(i, numargs)
		if (size <> "") then size = ccur(size)
	end if
next

' Read username and password from stdin
if  not WScript.StdIn.AtEndOfStream then
	inpStr = WScript.StdIn.ReadLine
end if
if verbose then wscript.echo "stdin: " & inpStr

dim cred
cred = split(inpStr, " ")
user = cred(0)
pass = cred(1) 

if ((file = "" AND path = "") or (tim = "" and size = "")) then
	Err.Raise vbObjectError + 1, "", "Error processing arguments"
	CheckError("")
end if

' separate drive from path
lc = instr(path, ":")
if (lc > 0) then 
	drive = left(path, lc)
	path = right(path, len(path)-lc)
end if

' fix up path
if len(path) > 0 then
	if (right(path,1) <> "\") then path = path & "\\"	' add a backslashes if needed
'	dpath = replace(path, "\", "\\")					' double up the backslashes
end if

' Build query
query = "Select * from CIM_DataFile"

if (file <> "") then
	dim files
	files = split(file,",")
	for i = 0 to UBound(files)

		dfile = replace(files(i), "*", "%")
		dfile = replace(dfile, "?", "_")
		if (instr(dfile, "%") > 0) or (instr(dfile, "_") > 0) then 
			ls = "like"
		else
			ls = "="
		end if

		if (i = 0) then
			query = query & " WHERE (Name "
		else
			query = query & " or Name "
		end if

		query = query & ls & " '" & drive & path & dfile & "'"
	next
	query = query & ")"
end if

if (path <> "") then 
	if (file = "") then
		query = query & " WHERE Drive = '" & drive & "' and Path = '" & path & "'"
	else
		query = query & " and Drive = '" & drive & "' and Path = '" & path & "'"
	end if
end if

Set objSWbemDateTime = CreateObject("WbemScripting.SWbemDateTime")
CheckError("")

sclause = ""
tclause = ""

if (size <> "") then sclause = " FileSize > " & size

' pick apart time
if (tim <> "::") then
	dim tp
	tp = split(tim, ":")
	tl = ubound(tp)
	
	objSWbemDateTime.SetVarDate Now, True
	dtm = objSWbemDateTime.GetVarDate(True)
	if (tp(0) <> "") then dtm = DateAdd("h", -1*tp(0), dtm)
	if (tl >= 1 and tp(1) <> "") then dtm = DateAdd("n", -1*tp(1), dtm)
	if (tl >= 2 and tp(2) <> "") then dtm = DateAdd("s", -1*tp(2), dtm)
	objSWbemDateTime.SetVarDate dtm, True
	tclause = " LastModified >= '" & objSWbemDateTime.Value & "'"
end if
CheckError("")

if (tim <> "::" and size <> "") then
	query = query & " and (" & sclause & " or " & tclause & ")"
else
	query = query & " and " & sclause & tclause			' one is empty
end if

if (verbose) then wscript.echo "query = " & query

' Connect with target via WMI
strComputer = host
Set objSWbemLocator = CreateObject("WbemScripting.SWbemLocator")
CheckError("")

if (user = "") or (lcase(user) = "none") then		' no authentication needed
	Set objWMIService = GetObject("winmgmts:" & "{impersonationLevel=impersonate}!\\" & strComputer & "\root\cimv2") 
	CheckError("")
else						' authenticate with user/pass
	user = Replace(user,"\\","\")
	Set objWMIService = objSWbemLocator.ConnectServer (strComputer, "\root\cimv2", user, pass)
	CheckError("")
	objWMIService.Security_.ImpersonationLevel = 3
end if

' Execute query
Set colItems = objWMIService.ExecQuery(query,,48)
CheckError("")

' Loop through files to set body, reason and returncode
body = ""
returncode = 0

For Each objItem in colItems
	objSWbemDateTime.Value =  objItem.LastModified
	dtm = objSWbemDateTime.GetVarDate(True)
	kb = formatnumber(cdbl(objItem.FileSize)/1024,1,vbTrue,vbFalse,vbFalse)
	fn = objItem.FileName & "." & objItem.Extension
	pad = -len(fn)
	do
		pad = pad + 20
	loop until pad > 0
	body = body & vbNewLine & "    " & fn & space(pad) & dtm & "  " & kb & " KB"
	returncode = 2
Next
CheckError("")

if (returncode = 2) then 
	reason = "Files in " & drive & path & " have changed."
else
	reason = "No files in " & drive & path & " have changed."
end if

' Build data output
output= "\{reason:=""" & reason & """}"

wscript.echo output & "\B5\WMI File Check\P0\" & replace(body, "\", "\\")

' Done
wscript.quit(returncode)
</tool:file_chk.vbs>